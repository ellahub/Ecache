// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citydata.proto

#ifndef PROTOBUF_citydata_2eproto__INCLUDED
#define PROTOBUF_citydata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class citydata;
class citydataDefaultTypeInternal;
extern citydataDefaultTypeInternal _citydata_default_instance_;

namespace protobuf_citydata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_citydata_2eproto

// ===================================================================

class citydata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:citydata) */ {
 public:
  citydata();
  virtual ~citydata();

  citydata(const citydata& from);

  inline citydata& operator=(const citydata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  citydata(citydata&& from) noexcept
    : citydata() {
    *this = ::std::move(from);
  }

  inline citydata& operator=(citydata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const citydata& default_instance();

  static inline const citydata* internal_default_instance() {
    return reinterpret_cast<const citydata*>(
               &_citydata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(citydata* other);
  friend void swap(citydata& a, citydata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline citydata* New() const PROTOBUF_FINAL { return New(NULL); }

  citydata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const citydata& from);
  void MergeFrom(const citydata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(citydata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 2;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint32 lv = 4;
  bool has_lv() const;
  void clear_lv();
  static const int kLvFieldNumber = 4;
  ::google::protobuf::uint32 lv() const;
  void set_lv(::google::protobuf::uint32 value);

  // required uint32 create_time = 5;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  ::google::protobuf::uint32 create_time() const;
  void set_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:citydata)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_account();
  void clear_has_account();
  void set_has_name();
  void clear_has_name();
  void set_has_lv();
  void clear_has_lv();
  void set_has_create_time();
  void clear_has_create_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 create_time_;
  friend struct protobuf_citydata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// citydata

// required uint64 id = 1;
inline bool citydata::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void citydata::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void citydata::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void citydata::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 citydata::id() const {
  // @@protoc_insertion_point(field_get:citydata.id)
  return id_;
}
inline void citydata::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:citydata.id)
}

// required bytes account = 2;
inline bool citydata::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void citydata::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void citydata::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void citydata::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& citydata::account() const {
  // @@protoc_insertion_point(field_get:citydata.account)
  return account_.GetNoArena();
}
inline void citydata::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:citydata.account)
}
#if LANG_CXX11
inline void citydata::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:citydata.account)
}
#endif
inline void citydata::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:citydata.account)
}
inline void citydata::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:citydata.account)
}
inline ::std::string* citydata::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:citydata.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* citydata::release_account() {
  // @@protoc_insertion_point(field_release:citydata.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void citydata::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:citydata.account)
}

// required bytes name = 3;
inline bool citydata::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void citydata::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void citydata::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void citydata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& citydata::name() const {
  // @@protoc_insertion_point(field_get:citydata.name)
  return name_.GetNoArena();
}
inline void citydata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:citydata.name)
}
#if LANG_CXX11
inline void citydata::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:citydata.name)
}
#endif
inline void citydata::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:citydata.name)
}
inline void citydata::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:citydata.name)
}
inline ::std::string* citydata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:citydata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* citydata::release_name() {
  // @@protoc_insertion_point(field_release:citydata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void citydata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:citydata.name)
}

// required uint32 lv = 4;
inline bool citydata::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void citydata::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void citydata::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void citydata::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 citydata::lv() const {
  // @@protoc_insertion_point(field_get:citydata.lv)
  return lv_;
}
inline void citydata::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:citydata.lv)
}

// required uint32 create_time = 5;
inline bool citydata::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void citydata::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void citydata::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void citydata::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 citydata::create_time() const {
  // @@protoc_insertion_point(field_get:citydata.create_time)
  return create_time_;
}
inline void citydata::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:citydata.create_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_citydata_2eproto__INCLUDED
